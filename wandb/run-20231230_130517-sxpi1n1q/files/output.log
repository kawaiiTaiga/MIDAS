Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at roberta-large and are newly initialized: ['classifier.out_proj.bias', 'classifier.out_proj.weight', 'classifier.dense.bias', 'classifier.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.


Map:  69%|██████████████████████████████████▎               | 30000/43780 [00:03<00:01, 8450.35 examples/s]
  0%|                                                                             | 0/4000 [00:00<?, ?it/s]/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '
























































  2%|█▎                                                                | 81/4000 [02:05<1:31:38,  1.40s/it]Traceback (most recent call last):
  File "/data/2_data_server/nlp-04/lost_technology/test.py", line 105, in <module>
    trainer.train()
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/transformers/trainer.py", line 1555, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/transformers/trainer.py", line 1837, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/transformers/trainer.py", line 2682, in training_step
    loss = self.compute_loss(model, inputs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/transformers/trainer.py", line 2707, in compute_loss
    outputs = model(**inputs)
              ^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 185, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/parallel/data_parallel.py", line 200, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/site-packages/torch/nn/parallel/parallel_apply.py", line 102, in parallel_apply
    thread.join()
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/threading.py", line 1112, in join
    self._wait_for_tstate_lock()
  File "/home/nlp-04/anaconda3/envs/fuck/lib/python3.11/threading.py", line 1132, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at roberta-large and are newly initialized: ['classifier.out_proj.bias', 'classifier.dense.bias', 'classifier.out_proj.weight', 'classifier.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.

  0%|                                                                           | 0/4000 [00:00<?, ?it/s]You're using a RobertaTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.














































































































































































 10%|███████▋                                                                     | 400/4000 [06:04<54:06,  1.11it/s]







 92%|█████████████████████████████████████████████████████████████████████████▌      | 23/25 [00:11<00:01,  1.85it/s]











































 12%|█████████▌                                                                   | 499/4000 [07:45<50:24,  1.16it/s]



































































































































 20%|███████████████▍                                                             | 800/4000 [12:09<47:53,  1.11it/s]





 80%|████████████████████████████████████████████████████████████████                | 20/25 [00:10<00:02,  1.92it/s]
























































































 25%|███████████████████▏                                                         | 999/4000 [15:16<43:27,  1.15it/s]
























































































 30%|██████████████████████▊                                                     | 1200/4000 [18:13<40:15,  1.16it/s]





 88%|██████████████████████████████████████████████████████████████████████▍         | 22/25 [00:11<00:01,  1.84it/s]




































































































































 38%|████████████████████████████▌                                               | 1500/4000 [22:49<36:11,  1.15it/s]











































 40%|██████████████████████████████▍                                             | 1600/4000 [24:17<35:47,  1.12it/s]






 92%|█████████████████████████████████████████████████████████████████████████▌      | 23/25 [00:11<00:01,  1.86it/s]















































































































































































 50%|██████████████████████████████████████                                      | 2000/4000 [30:22<29:22,  1.13it/s]
  8%|██████▍                                                                          | 2/25 [00:00<00:05,  3.95it/s]






 84%|███████████████████████████████████████████████████████████████████▏            | 21/25 [00:10<00:02,  1.89it/s]




















































































 55%|█████████████████████████████████████████▋                                  | 2194/4000 [33:25<26:24,  1.14it/s]Traceback (most recent call last):
  File "/data/2_data_server/nlp-04/lost_technology/test.py", line 113, in <module>
    trainer.train()
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/transformers/trainer.py", line 1591, in train
    return inner_training_loop(
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/transformers/trainer.py", line 1892, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/transformers/trainer.py", line 2776, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/transformers/trainer.py", line 2801, in compute_loss
    outputs = model(**inputs)
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 171, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 181, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 81, in parallel_apply
    thread.join()
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/threading.py", line 1096, in join
    self._wait_for_tstate_lock()
  File "/home/nlp-04/anaconda3/envs/kkm/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
KeyboardInterrupt